#pragma version =0.4.1;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

int __tact_my_balance() inline {
    return pair_first(get_balance());
}

forall X -> X __tact_not_null(X x) inline { throw_if(128, null?(x)); return x; }

global (int, slice, int, slice) __tact_context;
global cell __tact_context_sys;

(int, slice, int, slice) __tact_context_get() inline { return __tact_context; }

() __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() != 267);
}

builder __tact_store_bool(builder b, int v) inline {
    b = b.store_int(v, 1);
    return b;
}

builder __tact_store_address(builder b, slice address) inline {
    __tact_verify_address(address);
    b = b.store_slice(address);
    return b;
}

int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline {
    var (r, ok) = idict_get?(d, kl, k);
    if (ok) {
        return r~load_int(vl);
    } else {
        return null();
    }
}

slice __tact_dict_get_int_slice(cell d, int kl, int k) inline {
    var (r, ok) = idict_get?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

tuple __tact_string_builder_start(builder b) inline {
    return tpush(tpush(empty_tuple(), b), null());
}

tuple __tact_string_builder_start_comment() inline {
    return __tact_string_builder_start(begin_cell().store_uint(0, 32));
}

cell __tact_string_builder_end(tuple builders) inline {
    (builder b, tuple tail) = uncons(builders);
    cell c = b.end_cell();
    while(~ null?(tail)) {
        (b, tail) = uncons(tail);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref {
    int sliceRefs = slice_refs(sc);
    int sliceBits = slice_bits(sc);

    while((sliceBits > 0) | (sliceRefs > 0)) {

        ;; Load the current builder
        (builder b, tuple tail) = uncons(builders);
        int remBytes = 127 - (builder_bits(b) / 8);
        int exBytes = sliceBits / 8;

        ;; Append bits
        int amount = min(remBytes, exBytes);
        if (amount > 0) {
            slice read = sc~load_bits(amount * 8);
            b = b.store_slice(read);
        }

        ;; Update builders
        builders = cons(b, tail);

        ;; Check if we need to add a new cell and continue
        if (exBytes - amount > 0) {
            var bb = begin_cell();
            builders = cons(bb, builders);
            sliceBits = (exBytes - amount) * 8;
        } elseif (sliceRefs > 0) {
            sc = sc~load_ref().begin_parse();
            sliceRefs = slice_refs(sc);
            sliceBits = slice_bits(sc);
        } else {
            sliceBits = 0;
            sliceRefs = 0;
        }
    }

    return ((builders), ());
}

(slice, ((int, cell, cell))) __gen_read_AirdropTON_Without_Comment(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2107066889);
    var v'length = sc_0~load_int(257);
    var v'user_list = sc_0~load_dict();
    var v'sending_value = sc_0~load_dict();
    return (sc_0, (v'length, v'user_list, v'sending_value));
}

tuple $__gen_Airdrop_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

tuple __gen_load_Airdrop() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        return $__gen_Airdrop_init();
    }
}

() __gen_store_Airdrop(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}

;; String "Complete"
slice __gen_str_339420938() asm "B{b5ee9c7241010101000a000010436f6d706c657465f8ddae36} B>boc <s PUSHSLICE";

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

cell $__gen_String_asComment(slice $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_comment();
    $b~__tact_string_builder_append($self);
    return __tact_string_builder_end($b);
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_value_mode_bounce(slice to, int value, int mode, int bounce) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((tuple), ()) $__gen_Airdrop_receive_AirdropTON_Without_Comment(tuple $self, (int, cell, cell) $msg) impure inline {
    var $self = $self;
    var ($msg'length, $msg'user_list, $msg'sending_value) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $msgValue = $ctx'value;
    int $tonBalanceBeforeMsg = (__tact_my_balance() - $msgValue);
    int $storageFee = (40000000 - min($tonBalanceBeforeMsg, 40000000));
    $msgValue = ($msgValue - ($storageFee + 40000000));
    int $value_default = 1;
    int $sendingValue = 1;
    do {
        slice $receiver = __tact_dict_get_int_slice($msg'user_list, 257, $value_default);
        int $value_send = __tact_dict_get_int_int($msg'sending_value, 257, $value_default, 257);
        $sendingValue = (__tact_not_null($value_send) + $sendingValue);
        $send(__gen_constructor_SendParameters$to_value_mode_bounce(__tact_not_null($receiver), __tact_not_null($value_send), 2, false));
        $value_default = ($value_default + 1);
    } until (($value_default > $msg'length));
    $send(__gen_constructor_SendParameters$to_value_mode_bounce_body($ctx'sender, ($msgValue - $sendingValue), 2, false, $__gen_String_asComment(__gen_str_339420938())));
    return ($self, ());
}

((tuple), ()) $__gen_Airdrop_receive(tuple $self) impure inline {
    var $self = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    $send(__gen_constructor_SendParameters$to_value_mode_bounce($ctx'sender, 0, (2 + 128), false));
    return ($self, ());
}

(tuple, int) __gen_router_Airdrop(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive AirdropTON_Without_Comment message
    if (op == 2107066889) {
        var msg = in_msg~__gen_read_AirdropTON_Without_Comment();
        self~$__gen_Airdrop_receive_AirdropTON_Without_Comment(msg);
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~$__gen_Airdrop_receive();
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    
    ;; Load contract data
    var self = __gen_load_Airdrop();
    
    ;; Handle operation
    int handled = self~__gen_router_Airdrop(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_Airdrop(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmU9Dm5YgmnhRiePhpqTiuFBqbSchbM3A3dTLvY9cSgVQR";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
